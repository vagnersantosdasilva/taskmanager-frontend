{"version":3,"sources":["components/NavBarItem.js","constants.js","api/AuthService.js","components/NavBar.js","api/TaskService.js","components/Alert.js","components/Spinner.js","components/TaskListTable.js","components/TaskForm.js","components/Login.js","App.js","index.js"],"names":["NavBarItem","to","this","props","item","href","className","active","onClick","e","name","Component","SERVER","console","log","AUTH_ENDPOINT","API_ENDPOINT","username","password","onLogin","axios","post","then","response","jwtToken","headers","replace","sessionStorage","setItem","catch","error","getItem","getJWTToken","removeItem","jwtTokenData","atob","split","JSON","parse","NavBar","state","items","onClickHandler","bind","onLogoutHandler","itemClicked","forEach","setState","AuthService","logout","onLinkClick","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","map","i","key","isAuthenticated","getJWTTokenData","displayName","onFetch","onError","get","buildAuthHeader","data","content","onLoad","onDelete","delete","task","onSave","put","Alert","role","message","Spinner","TaskListTable","tasks","editId","loading","alert","onDeleteHandler","onStatusChangeHandler","onEditHandler","setErrorState","listTasks","TaskService","list","window","confirm","toast","success","position","POSITION","BOTTOM_LEFT","done","save","style","marginTop","length","onStatusChange","onEdit","autoClose","TableHeader","scope","TableBody","checked","onChange","description","format","whenToDo","value","EmptyTableBody","colSpan","TaskForm","redirect","buttonName","saving","onSubmitHandler","onInputChangeHandler","match","params","load","loadiong","event","preventDefault","field","target","prevState","onSubmit","placeholder","disable","aria-hidden","Login","processing","loggedIn","handleInputChanged","handleSubmit","handleLoginResponse","login","onLoginSuccess","htmlFor","disabled","App","onRefreshHandler","forceUpdate","exact","path","render","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b69f4897.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass NavBarItem extends Component {\n    render() {\n        return (\n            <div>\n                <Link to={this.props.item.href}\n                className = {`nav-item nav-link  ${this.props.item.active? \"active\" :\"\"}`}\n                onClick={e => this.props.onClick(this.props.item) }> \n                {this.props.item.name} </Link>\n            </div>\n        );\n    }\n}\n\nexport default NavBarItem;","const SERVER = 'http://localhost:8080';//process.env.REACT_APP_SERVER;\nconsole.log('SERVER :'+SERVER);\n\nexport const APP_NAME = \"Task Manager\";\nexport const AUTH_ENDPOINT = `${SERVER}`;\nexport const API_ENDPOINT = `${SERVER}/api`;\nexport const JWT_TOKEN_NAME = \"jwt\";\n\n","import axios from \"axios\";\nimport {AUTH_ENDPOINT, JWT_TOKEN_NAME} from '../constants.js';\n\nclass AuthService{\n    login(username,password,onLogin){\n        axios\n            .post(`${AUTH_ENDPOINT}/login`,{username:username,password:password})\n            .then(response =>{\n                const jwtToken = response.headers['authorization'].replace(\"Bearer \",\"\");\n                sessionStorage.setItem(JWT_TOKEN_NAME,jwtToken);\n                onLogin(true);\n            }).catch(error=>{\n                console.error('Um erro ocorreru :'+error);\n                onLogin(false);\n            });\n    }\n\n    getJWTToken(){\n        return sessionStorage.getItem(JWT_TOKEN_NAME);\n    }\n\n    isAuthenticated(){\n        if ((this.getJWTToken()) == null) return false;\n        return true;\n    }\n\n    logout(){\n        sessionStorage.removeItem(JWT_TOKEN_NAME);\n    }\n\n    getJWTTokenData(){\n        //Converter TOKEN em objeto que contem o displayname\n        const jwtToken = this.getJWTToken();\n        if (jwtToken ==null) {\n            return null\n        }\n        const jwtTokenData = atob(jwtToken.split(\".\")[1]);\n        return JSON.parse(jwtTokenData);\n    }\n\n}\n\nexport default new AuthService();","import React, { Component } from 'react';\nimport NavBarItem from './NavBarItem';\nimport {APP_NAME} from '../constants'\nimport AuthService from '../api/AuthService';\n\nclass NavBar extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            items:[\n                {name:\"Listar Tarefas\" , href:\"/\" , active:true},\n                {name:\"Nova Tarefa\" , href:\"/form\" ,active:false}\n            ]\n        }\n        this.onClickHandler=this.onClickHandler.bind(this);\n        this.onLogoutHandler=this.onLogoutHandler.bind(this);\n    }\n    onClickHandler(itemClicked){\n        const items =[...this.state.items];\n        items.forEach(item=>{\n            if (item.name===itemClicked.name){\n                item.active=true;\n\n            }else{\n                item.active=false;\n            }\n        })\n        this.setState({items});\n    }\n\n    onLogoutHandler(){\n        AuthService.logout();\n        this.props.onLinkClick();\n    }\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <span className=\"navbar-brand\" href=\"#\">{APP_NAME}</span>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav mr-auto\">\n                            {this.state.items.map(\n                                i=> <NavBarItem \n                                    key = {i.name}\n                                    item ={i}\n                                    onClick = {this.onClickHandler} /> )}\n                        \n                            {AuthService.isAuthenticated() ? \n                                <NavBarItem \n                                    item = {{name:\"Logout\" , href :\"#\" , active:\"false\"}} \n                                    onClick={this.onLogoutHandler}\n                                    />\n                                :\"\"\n                            }\n\n                        </div>\n                        <span className = \"navbar-text\">\n                                {AuthService.isAuthenticated()? `Olá, ${AuthService.getJWTTokenData().displayName}!`:\"\"}\n                            </span>\n                        \n                    </div>\n                </nav>\n            </div>      \n            \n        );\n    }\n}\n\nexport default NavBar;","import AuthService from \"./AuthService\";\nimport axios from \"axios\";\nimport { API_ENDPOINT } from \"../constants\";\n\n//mock\nclass TaskService{\n    \n    list(onFetch,onError){\n        axios.get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`,this.buildAuthHeader())\n            .then(response=>onFetch(response.data.content))\n            .catch(e =>onError(e));\n    }\n\n    load(id,onLoad,onError){\n        axios.get(`${API_ENDPOINT}/tasks/${id}`,this.buildAuthHeader())\n            .then(response=>onLoad(response.data))\n            .catch(e =>onError(e));   \n    }\n   \n    delete(id,onDelete,onError){\n\n         axios.delete(`${API_ENDPOINT}/tasks/${id}`,this.buildAuthHeader())\n            .then(response=>onDelete())\n            .catch(e =>onError(e));   \n        //this.tasks = this.tasks.filter(task=> task.id !== id);\n    }\n    save(task,onSave,onError) {\n        if (task.id===0) {\n\n            axios.post(`${API_ENDPOINT}/tasks/`,task,this.buildAuthHeader())\n                .then(()=>onSave())\n                .catch(e => onError(e));\n            //this.tasks = this.tasks.map(t => task.id !== t.id ? t:task )\n        }\n        else {\n            axios.put(`${API_ENDPOINT}/tasks/${task.id}`,task,this.buildAuthHeader())\n                .then(() => onSave() )\n                .catch(e => onError(e));\n        }\n    }\n\n    buildAuthHeader(){\n        return{\n            headers:{\n                'Authorization':`Bearer ${AuthService.getJWTToken()}`\n            }\n        }\n    }\n\n}\n\nexport default new TaskService();","import React from 'react';\n\nconst Alert = (props) =>\n    <div className=\"alert alert-danger\" role=\"alert\">\n        {props.message}\n    </div>\n\nexport default Alert;","import React from 'react';\nconst Spinner =() =>\n    <div className=\"d-flex justify-content-center\" >\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Carregando..</span>\n        </div>\n\n    </div>\n\n    export default Spinner;","import React, { Component } from 'react';\nimport TaskService from '../api/TaskService';\nimport { ToastContainer, toast } from 'react-toastify';\nimport \"react-toastify/dist/ReactToastify.css\"\nimport { Redirect } from 'react-router-dom';\nimport Alert from './Alert';\nimport Spinner from './Spinner';\nimport AuthService from '../api/AuthService';\nimport Moment from 'react-moment';\n\nclass TaskListTable extends Component {\n\n    constructor(props){\n        super(props)\n        \n        this.state = {\n           \n            tasks:[],\n            editId:0,\n            loading:false,\n            alert:null\n        }\n        this.onDeleteHandler=this.onDeleteHandler.bind(this);\n        this.onStatusChangeHandler=this.onStatusChangeHandler.bind(this);\n        this.onEditHandler=this.onEditHandler.bind(this);\n        this.setErrorState=this.setErrorState.bind(this);\n    }\n\n    //Quando o componente estiver pronto\n    componentDidMount() {\n        this.listTasks();\n    }\n\n    \n    listTasks(){\n        //this.setState({tasks:TaskService.list()});\n        if (!AuthService.isAuthenticated()){\n                return <Redirect to=\"/login/\"/> ;\n        }\n        this.setState({loading:true});\n        TaskService.list(\n            tasks =>this.setState({tasks:tasks ,loading:false}),\n            error =>this.setErrorState(error)\n        );\n    }\n\n    setErrorState(error){\n        this.setState({alert:`Erro na requisição :${error.message}`,loading:false})\n    }\n\n    onDeleteHandler(id){\n        if (window.confirm(\"Tem certeza que deseja excluir a tarefa ?\")){\n            TaskService.delete(\n                id,\n                () =>{ \n                    this.listTasks();\n                    toast.success(\"Tarefa exluída\" ,{position:toast.POSITION.BOTTOM_LEFT});\n                },\n                error=>this.setErrorState(error)\n            );\n            //this.listTasks();\n            \n        }\n    }\n\n    onStatusChangeHandler(task){\n        task.done=!task.done;\n\n        TaskService.save(task,\n            ()=>this.listTasks(),\n            (error => this.setErrorState(error)));\n\n    }\n\n    onEditHandler(id){\n        this.setState({editId:id});\n        \n    }\n\n    \n\n    render() {\n        \n        if(!AuthService.isAuthenticated()){return <Redirect to=\"/login\"/>}\n        \n        if (this.state.editId > 0)  return <Redirect to= {`/form/${this.state.editId}`}/>\n        \n        return (\n         \n            <div className=\"container\" style={{marginTop:20}}>\n                <h3>Lista de Tarefas</h3>\n                {this.state.alert!=null ? <Alert message ={this.state.alert} />:\"\"}\n                {this.state.loading ?<Spinner/> :\n                    <table className=\"table table-striped\">\n                        <TableHeader/>\n                        {this.state.tasks.length > 0 ?\n                            <TableBody \n                                tasks={this.state.tasks}\n                                onDelete={this.onDeleteHandler}\n                                onStatusChange ={this.onStatusChangeHandler}\n                                onEdit={this.onEditHandler}\n                            />\n                            :\n                            <EmptyTableBody/>\n                        }\n                    </table>\n                }\n                <ToastContainer autoClose={1500}/>\n            </div>\n        );\n    }\n}\n\n\nconst TableHeader = () =>{\n    return (\n        <thead className=\"thead-dark\">\n            <tr>\n                <th scope=\"col\">Status</th>\n                <th scope=\"col\">Descrição</th>\n                <th scope=\"col\">Data</th>\n                <th scope=\"col\">Ações</th>\n            </tr>\n        </thead>\n    )\n}\n\nconst TableBody =(props) =>{\n    \n    return (\n        <tbody>\n            {props.tasks.map(task => \n                <tr key={task.id}> \n                    <td>\n                        <input type=\"checkbox\" \n                            checked={task.done} \n                            onChange={()=>props.onStatusChange(task)}\n                        />\n                    </td>\n                    <td>\n                        {task.done ? <s>{task.description}</s> : task.description }\n                    </td>\n                    <td>\n                        {task.done ? <s><Moment format=\"DD/MM/YYYY\">{task.whenToDo}</Moment></s> : \n                        <Moment format=\"DD/MM/YYYY\">{task.whenToDo}</Moment> }\n                    </td>\n                    <td>\n                        <input \n                            type=\"button\" \n                            value=\"Editar\" \n                            className=\"btn btn-primary\"\n                            onClick={()=>props.onEdit(task.id)}\n                        />&nbsp;\n                        <input \n                            type=\"button\" \n                            value=\"Excluir\" \n                            className=\"btn btn-danger\"\n                            onClick={() => props.onDelete(task.id)}\n                        />\n                    </td>\n                </tr>    \n            )}\n        </tbody>            \n    )\n}\n\nconst EmptyTableBody = (props) =>{\n    return (\n        <tbody>\n            <tr><td colSpan=\"4\">Nenhuma tarefa no momento</td></tr>\n        </tbody>\n    )\n}\n\nexport default TaskListTable;","import React, { Component } from 'react';\nimport TaskService from '../api/TaskService';\nimport { Redirect } from 'react-router-dom';\nimport AuthService from '../api/AuthService';\nimport Spinner from './Spinner';\nimport Alert from './Alert';\n\nclass TaskForm extends Component {\n    constructor(props){\n        super(props);\n\n        this.state ={\n            task : {\n                id:0,  \n                description:\"\",\n                whenToDo:\"\"\n            },\n            redirect:false,\n            buttonName:\"Cadastrar\",\n            alert:null,\n            loading:false,\n            saving:false\n        }\n\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.onInputChangeHandler = this.onInputChangeHandler.bind(this);\n        this.setErrorState = this.setErrorState.bind(this);\n    }\n\n    //verificar se id está na url\n    componentDidMount(){\n        const editId = this.props.match.params.id;\n        console.log(~~editId)\n        this.setState({loading:true});\n       \n        if (~~editId!==0){ //modo de edição\n              TaskService.load( \n              ~~editId,\n                task => this.setState({task:task,buttonName:\"Alterar\"}),\n                error =>{\n                    this.setErrorState(error);\n                }\n            );// editId convertido para inteiro\n        }\n        this.setState({loading:false});\n        \n\n    }\n\n    setErrorState(error){\n        this.setState({alert:error.message ,loadiong:false,saving:false});\n    }\n\n    onSubmitHandler(event){\n        this.setState({saving:true});\n        event.preventDefault();  // não faz refresh quando onSubmit é chamado\n        TaskService.save(\n            this.state.task,\n            () =>this.setState({redirect:true,saving:false,alert:null}),\n            error => {\n                if(error.response){\n                    this.setErrorState(`Erro ao carregar dados ; ${error.response}`);\n                }else{\n                    this.setErrorState(`Erro na requisição :${error.message}`);\n                }\n            }\n        )\n        \n    }\n\n    onInputChangeHandler(event){\n        const field = event.target.name;\n        const value = event.target.value;\n        this.setState(prevState => ({task :{ ...prevState.task,[field]:value}}));\n        console.log(this.state.task);\n    }\n\n    render() {\n        if(!AuthService.isAuthenticated()){return <Redirect to=\"/login\"/>}\n        if (this.state.redirect){\n           return <Redirect to=\"/\" />\n        }\n\n        if (this.state.loading){\n            return <Spinner />\n        }\n        \n        return (\n            <div>\n                \n                <div className=\"container\">\n                    {this.state.alert!=null? <Alert message={this.state.alert} />:\"\"}\n                    <h2>{this.state.buttonName} Tarefa </h2>    \n                        <form onSubmit={this.onSubmitHandler}>\n                            <div className=\"form-group\">\n                                <label description=\"description\">Descrição</label>\n                                <input type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"description\"\n                                    value={this.state.task.description}\n                                    placeholder=\"Digite a descrição\" \n                                    onChange={this.onInputChangeHandler}/>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label data=\"whenToDo\">Data</label>\n                                <input type=\"date\"\n                                    className=\"form-control\"\n                                    name=\"whenToDo\"\n                                    value={this.state.task.whenToDo}\n                                    placeholder=\"Informe a data do evento\" \n                                    onChange={this.onInputChangeHandler}/>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button \n                                        type=\"submit\" \n                                        className=\"btn btn-primary\"\n                                        disable={this.state.saving}>\n                                            {\n                                                \n                                                this.state.saving?\n                                                    <span className=\"spinner-border spinner-border-sm\"\n                                                        role=\"status\" aria-hidden=\"true\"></span>\n                                                    :this.state.buttonName\n                                            }\n                                            \n\n                                </button>&nbsp;&nbsp;\n                                <button \n                                        type=\"button\" \n                                        className=\"btn btn-primary\"\n                                        onClick={()=>{this.setState({redirect:true})}}\n                                        >Cancelar\n                                        \n                                </button>\n                            </div>\n                            \n                        </form>\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TaskForm;","import React, { Component } from 'react';\nimport AuthService from '../api/AuthService';\nimport Alert from './Alert';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n\n   constructor(props){\n       super(props);\n       this.state = {\n           username :\"\",\n           password:\"\",\n           alert:null,\n           processing:false,\n           loggedIn:false\n       }\n       this.handleInputChanged=this.handleInputChanged.bind(this);\n       this.handleSubmit=this.handleSubmit.bind(this);\n       this.handleLoginResponse = this.handleLoginResponse.bind(this);\n   }\n\n   handleSubmit(event){\n       event.preventDefault();\n       AuthService.login(this.state.username,this.state.password,this.handleLoginResponse);\n\n   }\n   handleLoginResponse(success){\n       if (success){\n            this.setState({loggedIn:true});\n            this.props.onLoginSuccess();\n       }else{\n           this.setState({alert:\"O login não pode ser realizado\"})\n       }\n   }\n\n\n   handleInputChanged(event){\n       const field = event.target.name;\n       const value = event.target.value;\n       this.setState({[field]:value});\n\n   }\n\n    render() {\n        if(AuthService.isAuthenticated()){return <Redirect to=\"/\"/>}\n        if (this.state.loggedIn){\n            return <Redirect to =\"/\"  />\n        }\n        return (\n            <div>                \n                <div className=\"container\">\n                    <h2>Login</h2>\n                    {this.state.alert!==null?<Alert message={this.state.alert}/>:\"\"}\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Usuário</label>\n                            <input \n                                type = \"text\"\n                                className = \"form-control\"\n                                onChange = {this.handleInputChanged}\n                                value={this.state.username} \n                                name = \"username\"\n                                placeholder=\"Digite o usuário\"/>\n\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Senha</label>\n                            <input \n                                type = \"password\"\n                                className = \"form-control\"\n                                onChange = {this.handleInputChanged}\n                                value={this.state.password} \n                                name = \"password\"\n                                placeholder=\"Digite a senha\"/>\n\n                        </div>\n\n                        <button type=\"submit\"\n                                className=\"btn btn-primary\"\n                                disabled={this.state.processing}\n                                >Login\n                        </button>\n\n                        \n                    </form>\n                </div>\n            </div>\n                \n        );\n    }\n}\n\nexport default Login;","import React , { Component } from 'react';\nimport NavBar from './components/NavBar';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport TaskListTable from './components/TaskListTable';\nimport TaskForm from './components/TaskForm';\nimport Login from './components/Login';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.onRefreshHandler = this.onRefreshHandler.bind(this);\n\n  }\n\n  onRefreshHandler(){\n    this.forceUpdate();\n  }\n\n  render(){\n    return (\n     \n        <BrowserRouter>\n          <div className=\"App\">\n            <NavBar onLinkClick={this.onRefreshHandler}/>\n              <div className = \"container\" style = {{marginTop:20}}>\n              <Switch>\n                <Route exact path =\"/login\" render = {() => <Login onLoginSuccess ={this.onRefreshHandler}  />}></Route>\n                <Route exact path =\"/form\" component = {TaskForm}/>\n                <Route exact path =\"/form/:id\" component = {TaskForm}/>\n                <Route path =\"/\" component = {TaskListTable} />\n              </Switch>\n            </div>\n          </div>\n        </BrowserRouter>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}